#!/usr/bin/ruby

SHELF = 3
BLADE = 5
SECTOR_COUNT = 31457280
DEVICE = "eth0"

ENDPOINT = 's3.amazonaws.com'
ACCESS_KEY = 'notsosecret'
SECRET_KEY = 'soopers3kr1t'
BUCKET = "ihasone"

require 'optparse'
require 's3blade'

def main(args)
	options = parse_cmdline(args)
	
	options[:s3_access_key] = ENV['S3_ACCESS_KEY']
	options[:s3_secret_key] = ENV['S3_SECRET_KEY']

	blade = S3Blade.new(options)
	
	Signal.trap("USR1") do
		c = blade.cache
		
		puts "Cache info dump:"
		puts "Sectors stored: #{c.length}, #{(c.length / blade.cache_size.to_f) * 100}% full"
		puts "Oldest sector: #{c.sort_by { |k,v| v[:atime] }.first[1][:atime] rescue 'none'}"
	end
	blade.run
end

def parse_cmdline(args)
	opts = OptionParser.new
	optargs = {}
	
	opts.banner = "Usage: s3blade [options]"
	opts.separator ""
	opts.separator "Please set the S3_ACCESS_KEY and S3_SECRET_KEY environment variables"
	opts.separator "before running this program."
	opts.separator ""
	opts.separator "Mandatory arguments:"

	opts.on('-s', '--shelf', '=SHELF',
	        "The shelf ID of this target",
	        "  (between 0 and 65534)", Integer) { |v| optargs[:shelf] = v }
	
	opts.on('-b', '--blade', '=BLADE',
	        "The blade ID of this target",
	        "  (between 0 and 15)", Integer) { |v| optargs[:blade] = v }
	
	opts.on('--s3-bucket', '=BUCKET',
	        "Specify the bucket you wish to place s3blade blocks into",
	        String) { |v| optargs[:s3_bucket] = v }
	
	opts.on('-d', '--device', '=NETDEV',
	        "Network device to talk on",
	        String) { |v| optargs[:network_device] = v }
	
	opts.on('--size', '=SIZE',
	        "Size of the block device, in bytes",
	        "  (use kB, kiB, MB, MiB, GB, GiB, TB, TiB as suffixes)",
	        String) do |v|
		optargs[:device_size] = case v
			when /^(\d+)$/        then $1.to_i
			when /^(\d+)[kK]B?$/  then $1.to_i * 1000 ** 1
			when /^(\d+)[kK]iB?$/ then $1.to_i * 1024 ** 1
			when /^(\d+)[mM]B?$/  then $1.to_i * 1000 ** 2
			when /^(\d+)[mM]iB?$/ then $1.to_i * 1024 ** 2
			when /^(\d+)[gG]B?$/  then $1.to_i * 1000 ** 3
			when /^(\d+)[gG]iB?$/ then $1.to_i * 1024 ** 3
			when /^(\d+)[tT]B?$/  then $1.to_i * 1000 ** 4
			when /^(\d+)[tT]iB?$/ then $1.to_i * 1024 ** 4
			else
				raise ArgumentError.new("Unrecognised device size: #{v}")
		end
	end
	
	opts.separator ""
	opts.separator "Optional arguments:"
	
	opts.on('--s3-endpoint', '=ENDPOINT',
	        "The FQDN of the endpoint to connect to",
	        "  (default: s3.amazonaws.com)", String) { |v| optargs[:s3_endpoint] = v }
	
	opts.on('--object-name-pattern', '=PATTERN',
	        "Give an alternate pattern for the names of",
	        "  s3blade objects in the bucket",
	        "  (%s -> shelf ID, %b -> blade ID, %i -> block ID)",
	        "  (default: s3blade/e%s.%b_%i)",
	        String) { |v| optargs[:object_name_pattern] = v }
	
	opts.on('--serial', '=SERIAL',
	        "The serial number reported for this device",
	        "  (default: <shelf>.<blade>:<hostname>)",
	        String) { |v| optargs[:serial] = v }
	
	opts.on('--cache-size', '=SECTORS',
	        "The number of 512 byte sectors to store in the cache",
	        "  (default: 100,000)",
	        Integer) { |v| optargs[:cache_size] = v }
	
	opts.separator ""
	opts.separator "Meta arguments:"

	opts.on('-h', '--help',
	        "Print this help") { puts opts.to_s; exit 0 }
	opts.on('--version', "Show running version") do
		puts S3Blade::Version.join('.')
		exit
	end
	opts.on('--debug',
	        "Display a pile of debug info") { optargs[:debug] = true }

	opts.parse!(args)
	
	[:blade, :shelf, :s3_bucket, :device_size, :network_device].each do |opt|
		if optargs[opt].nil?
			$stderr.puts "ERROR: missing required argument #{opt}"
			$stderr.puts "Try --help for help"
			exit 1
		end
	end

	optargs
end

main(ARGV) if __FILE__ == $0
